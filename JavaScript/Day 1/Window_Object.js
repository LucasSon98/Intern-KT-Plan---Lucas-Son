// A window object is the representation of an open window in a browser, which is generated by the own browser. It is not a Javascript object.
// It is the global object of the browser environment.
// Through this object we can access different properties and apply methods of the open window where the javascript code is beeing run.

// Any variable created without using the const, let or var reserved words is a global variable.
// Global variables can be accessed in all parts of he program and become properties of a global object, in this case the window object.

// For example:

x = 3;
window.x; // will have the same value 3
x; // we can refer to global variables without using the window object


// ******** Some Window Object Methods ********

// Dialogs: there are three methods that produce dialogs in browsers (alert(), confirm() and prompt())

// alert displays a message in a dialog box while pausing the execution of the program. Always returns undefined
window.alert('Hello World');

// the confirm method stops the execution and displays the message provided as an argument in a dialog box which has an OK and Cancel button.
// If the user clicks the OK button the method will return a true boolean value. Otherwise, if the user clicks the Cancel button it will return false.
window.confirm('Do you wish to continue?');

// the prompt method, similarly as the confirm method, displays a dialog box with both OK and Cancel buttons.
// However, through this method the dialog box will also have an input field appart from the message provided as an argument.
// After the user gives an input and clicks the OK button the method will return that input as a string.
// If the user clicks the Cancel button it will return null.
window.prompt('Please enter your name:');

// A new window can be opened using the window.open() method.
// This takes the URL of the page to be opened as its first parameter, the window title as its second parameter, and a list of attributes as the third parameter.
const popup = window.open('https://sitepoint.com','SitePoint','width=700,height=700,resizable=yes');

// The close() method can be used to close a window
popup.close();

// It is also possible to move a window using the window.moveTo() method. 
// This takes two parameters that are the X and Y coordinates of the screen that the window is to be moved to
window.moveTo(0,0); // will move the window to the top-left corner of the screen

// You can resize a window using the window.resizeTo() method.
// This takes two parameters that specify the width and height of the resized window’s dimensions
window.resizeTo(600,400);


// *********** Location Object ***********

// The window.location property is an object that contains information about the URL of the current page.
// It contains a number of properties that provide information about different fragments of the URL.

// - Location Object Properties

// The href property returns the full URL as a string:
window.location.href; // since this is a read/write property the URL can also be changed by assignment.
window.location.href = 'https://www.sitepoint.com/';

// The protocol property returns a string describing the protocol used (such as http, https, pop2, ftp etc.)
window.location.protocol;

// The host property returns a string describing the domain of the current URL and the port number (this is often omitted if the default port 80 is used)
window.location.host;

// The hostname property returns a string describing the domain of the current URL
window.location.hostname;

// The port property returns a string describing the port number, although it will return an empty string if the port is not explicitly stated in the URL
window.location.port;

// The pathname property returns a string of the path that follows the domain
window.location.pathname;

// The search property returns a string that starts with a “?” followed by the query string parameters. It returns an empty string if there are no query string parameters.
window.location.search;

// The hash property returns a string that starts with a “#” followed by the fragment identifier.
// The fragment identifier introduced by a hash mark # is the optional last part of a URL for a document. It is typically used to identify a portion of that document.
window.location.hash;

// The origin property returns a string that shows the protocol and domain where the current page originated from. This property is read-only, so cannot be changed
window.location.origin;


// - Location Object Methods

// The reload() method can be used to force a reload of the current page.
// If it’s given a parameter of true, it will force the browser to reload the page from the server, instead of using a cached page.

// The assign() method can be used to load another resource from a URL provided as a parameter
window.location.assign('https://www.sitepoint.com/')

// The replace() method is almost the same as the assign() method, except the current page will not be stored in the session history,
// so the user will be unable to navigate back to it using the back button.

// The toString() method returns a string containing the whole URL




// *********** History Object ***********
// The window.history property can be used to access information about any previously visited pages in the current browser session.

// The window.history.length property shows how many pages have been visited before arriving at the current page.

// The window.history.go() method can be used to go to a specific page, where 0 is the current page:
window.history.go(1); // goes forward 1 page
window.history.go(0); // reloads the current page
window.history.go(-1); // goes back 1 page

// There are also the window.history.forward() and window.history.back() methods that can be used to navigate forwards and backwards by one page respectively